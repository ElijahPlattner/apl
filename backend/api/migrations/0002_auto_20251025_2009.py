# Generated by Django 4.2.25 on 2025-10-25 20:09

from django.db import migrations
import csv
from pathlib import Path

def load_lexicon_data(apps, schema_editor):
    print("\nLoading lexicon data...")
    Lexicon = apps.get_model(app_label='api', model_name='Lexicon')
    
    lexicon_path = Path(__file__).resolve().parent.parent.parent / "src" / "lexicon.csv"
    if not lexicon_path.exists():
        print(f"‚ö†Ô∏è  CSV file not found at {lexicon_path}")
        return

    with open(lexicon_path, newline='', encoding='utf-8') as csvfile:
        reader = csv.DictReader(csvfile)
        objs = []
        for row in reader:
            objs.append(Lexicon(
                rank=int(row["rank"]),
                word=row["word"],
                freq=int(row["freq"]) if row["freq"] else None,
                num_texts=int(row["num_texts"]) if row["num_texts"] else None,
                perc_caps=float(row["perc_caps"]) if row["perc_caps"] else None,
                blog=int(row["blog"]) if row["blog"] else None,
                web=int(row["web"]) if row["web"] else None,
                tvm=int(row["tvm"]) if row["tvm"] else None,
                spok=int(row["spok"]) if row["spok"] else None,
                fic=int(row["fic"]) if row["fic"] else None,
                mag=int(row["mag"]) if row["mag"] else None,
                news=int(row["news"]) if row["news"] else None,
                acad=int(row["acad"]) if row["acad"] else None,
                blog_pm=float(row["blog_pm"]) if row["blog_pm"] else None,
                web_pm=float(row["web_pm"]) if row["web_pm"] else None,
                tvm_pm=float(row["tvm_pm"]) if row["tvm_pm"] else None,
                spok_pm=float(row["spok_pm"]) if row["spok_pm"] else None,
                fic_pm=float(row["fic_pm"]) if row["fic_pm"] else None,
                mag_pm=float(row["mag_pm"]) if row["mag_pm"] else None,
                news_pm=float(row["news_pm"]) if row["news_pm"] else None,
                acad_pm=float(row["acad_pm"]) if row["acad_pm"] else None,
                apl_class=row["apl_class"]
            ))

        Lexicon.objects.bulk_create(objs, batch_size=2000)
        print(f"‚úÖ Loaded {len(objs)} lexicon entries.")


def load_looked_up_words_data(apps, schema_editor):
    print("Loading looked up words data...")
    LookedUpWords = apps.get_model(app_label='api', model_name='LookedUpWords')

    looked_up_words_path = Path(__file__).resolve().parent.parent.parent / "src" / "looked_up_words.csv"
    if not looked_up_words_path.exists():
        print(f"‚ö†Ô∏è  CSV file not found at {looked_up_words_path}")
        return

    objs = []
    with open(looked_up_words_path, newline='', encoding='utf-8') as csvfile:
        reader = csv.reader(csvfile)
        for row in reader:
            if row:  # skip empty lines
                objs.append(LookedUpWords(word=row[0]))

    if objs:
        LookedUpWords.objects.bulk_create(objs, batch_size=2000)
        print(f"‚úÖ Loaded {len(objs)} looked up words.")
    else:
        print("‚ö†Ô∏è No words found in CSV file.")

def load_skip_words_data(apps, schema_editor):
    print("Loading skip words data...")
    SkipWords = apps.get_model(app_label='api', model_name='SkipWords')

    skip_words_path = Path(__file__).resolve().parent.parent.parent / "src" / "skip_words.csv"
    if not skip_words_path.exists():
        print(f"‚ö†Ô∏è  CSV file not found at {skip_words_path}")
        return

    objs = []
    with open(skip_words_path, newline='', encoding='utf-8') as csvfile:
        reader = csv.reader(csvfile)
        for row in reader:
            if row:  # skip empty lines
                objs.append(SkipWords(word=row[0]))

    if objs:
        SkipWords.objects.bulk_create(objs, batch_size=2000)
        print(f"‚úÖ Loaded {len(objs)} skip words.")
    else:
        print("‚ö†Ô∏è No words found in CSV file.")

def unload_lexicon_data(apps, schema_editor):
    Lexicon = apps.get_model(app_label='api', model_name='Lexicon')
    Lexicon.objects.all().delete()

def unload_looked_up_words_data(apps, schema_editor):
    LookedUpWords = apps.get_model(app_label='api', model_name='LookedUpWords')
    LookedUpWords.objects.all().delete()

def unload_skip_words_data(apps, schema_editor):
    SkipWords = apps.get_model(app_label='api', model_name='SkipWords')
    SkipWords.objects.all().delete()

class Migration(migrations.Migration):
    atomic = False   # üëà this is the key line

    dependencies = [
        ('api', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(load_lexicon_data, reverse_code=unload_lexicon_data, atomic=False),
        migrations.RunPython(load_looked_up_words_data, reverse_code=unload_looked_up_words_data, atomic=False),
        migrations.RunPython(load_skip_words_data, reverse_code=unload_skip_words_data, atomic=False),
    ]
